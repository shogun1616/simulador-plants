
import streamlit as st
import pandas as pd
import random
import numpy as np
import matplotlib.pyplot as plt
import statistics

st.set_page_config(layout="wide")
st.title("üå± Simulador de Crecimiento de Plantas con An√°lisis Estad√≠stico")
st.markdown("Este simulador modela el crecimiento de frijoles en San Pedro de la Paz considerando el **tiempo de remojo antes de la germinaci√≥n** y condiciones clim√°ticas realistas.")

# Par√°metros de simulaci√≥n
dias = st.slider("D√≠as de simulaci√≥n", 5, 30, 15)
plantas = st.slider("N√∫mero de plantas por condici√≥n", 5, 100, 50)
remojos = st.multiselect("Tiempos de remojo a comparar (en horas)", [0, 6, 12, 18, 24, 30, 36, 48], [0, 12, 24, 36])
temp_min = st.slider("Temperatura m√≠nima (¬∞C)", 5, 20, 9)
temp_max = st.slider("Temperatura m√°xima (¬∞C)", 10, 30, 15)
humedad_prom = st.slider("Humedad promedio (%)", 40, 100, 79)
precipitacion = st.slider("Precipitaci√≥n mensual (mm)", 0, 300, 190)
dias_lluvia = st.slider("D√≠as de lluvia al mes", 1, 30, 5)
prob_lluvia = st.slider("Probabilidad diaria de lluvia", 0.0, 1.0, 0.24)

# Funci√≥n para modificar crecimiento seg√∫n tiempo de remojo
def factor_remojo(t):
    if t < 6:
        return 0.6
    elif t < 12:
        return 0.8
    elif t <= 24:
        return 1.0
    elif t <= 36:
        return 0.9
    else:
        return 0.7

# Funci√≥n de crecimiento diario
def crecimiento_diario(temp, humedad, lluvia, factor_rem):
    if temp < 10:
        crecimiento = 0.03
    elif temp < 15:
        crecimiento = 0.05
    else:
        crecimiento = 0.07
    if humedad > 80:
        crecimiento *= 1.1
    elif humedad < 60:
        crecimiento *= 0.9
    if lluvia > 5:
        crecimiento *= 1.2
    crecimiento *= factor_rem
    return round(crecimiento, 3)

# Simulaci√≥n completa
datos = []

for remojo in remojos:
    f_rem = factor_remojo(remojo)
    for planta in range(1, plantas + 1):
        altura = 0
        for dia in range(1, dias + 1):
            temp_dia = random.uniform(temp_min, temp_max)
            humedad_dia = random.uniform(humedad_prom - 5, humedad_prom + 5)
            lluvia_dia = random.uniform(0, precipitacion / dias_lluvia) if random.random() < prob_lluvia else 0
            crecimiento = crecimiento_diario(temp_dia, humedad_dia, lluvia_dia, f_rem)
            altura += crecimiento
            datos.append({
                'Tiempo de Remojo (h)': remojo,
                'Planta': f'Planta-{planta}',
                'D√≠a': dia,
                'Altura (cm)': round(altura, 2)
            })

df = pd.DataFrame(datos)

# Mostrar gr√°fico de crecimiento promedio con desviaci√≥n est√°ndar ¬±0.5 cm
st.subheader("üìä Crecimiento Promedio por D√≠a (con ¬±0.5 cm)")
fig, ax = plt.subplots(figsize=(10, 5))
for remojo in sorted(remojos):
    subset = df[df['Tiempo de Remojo (h)'] == remojo]
    promedio = subset.groupby('D√≠a')['Altura (cm)'].mean()
    ax.plot(promedio.index, promedio.values, label=f"{remojo}h")
    ax.fill_between(promedio.index, promedio.values - 0.5, promedio.values + 0.5, alpha=0.2)
ax.set_xlabel("D√≠a")
ax.set_ylabel("Altura (cm)")
ax.set_title("Altura Promedio con Variabilidad Estimada (¬±0.5 cm)")
ax.legend(title="Remojo")
st.pyplot(fig)

# Estad√≠sticas finales por condici√≥n
st.subheader("üìà Estad√≠sticas Finales por Tiempo de Remojo")
resultados = []
for remojo in sorted(remojos):
    final = df[(df['D√≠a'] == dias) & (df['Tiempo de Remojo (h)'] == remojo)]
    alturas = final['Altura (cm)'].tolist()
    media = round(statistics.mean(alturas), 2)
    mediana = round(statistics.median(alturas), 2)
    try:
        moda = round(statistics.mode(alturas), 2)
    except:
        moda = "‚Äî"
    desv = round(statistics.stdev(alturas), 2) if len(alturas) > 1 else 0
    resultados.append({
        'Remojo (h)': remojo,
        'Media (cm)': f"{media} ¬± 0.5",
        'Mediana (cm)': mediana,
        'Moda (cm)': moda,
        'Desviaci√≥n est√°ndar': desv
    })

st.table(pd.DataFrame(resultados))

# Mostrar tabla completa (opcional)
if st.checkbox("üìã Mostrar tabla completa de simulaci√≥n"):
    st.dataframe(df)

# Exportar datos
csv = df.to_csv(index=False).encode('utf-8')
st.download_button("üíæ Descargar datos como CSV", csv, "simulacion_plantas.csv", "text/csv")

# Nota
st.markdown("**Notas:** Las medidas incluyen una variabilidad estimada de ¬± 0.5 cm por d√≠a. El simulador no reemplaza datos reales pero permite visualizar tendencias probables seg√∫n factores ambientales y el remojo previo a la germinaci√≥n.")
